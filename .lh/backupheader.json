{
    "sourceFile": "backupheader",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1760590368263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1760590368263,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport Image from \"next/image\";\r\nimport Link from \"next/link\";\r\nimport { usePathname } from \"next/navigation\";\r\nimport Logo from \"../../public/Logo.svg\";\r\nimport LogoSmall from \"../../public/Logo_left.svg\";\r\nimport FlagVN from \"../../public/vietnam.png\";\r\nimport FlagEN from \"../../public/english.png\";\r\nimport { ChevronDown, Menu, X } from \"lucide-react\";\r\nimport { FaFacebook, FaYoutube, FaLinkedin, FaTiktok } from \"react-icons/fa\";\r\nimport { useLanguage } from \"@/contexts/LanguageContext\";\r\n\r\nexport default function Header() {\r\n  const [isOpenLang, setIsOpenLang] = useState(false);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n  const [openDropdown, setOpenDropdown] = useState<string | null>(null);\r\n  const langRef = useRef<HTMLDivElement>(null);\r\n  const pathname = usePathname();\r\n  const { language, setLanguage, t } = useLanguage();\r\ntype MenuChild = {\r\n  name: string;\r\n  path: string;\r\n  icon?: React.ReactNode;\r\n};\r\n\r\ntype MenuItem = {\r\n  name: string;\r\n  key: string;\r\n  path?: string;\r\n  children?: MenuChild[];\r\n};\r\n\r\n  const menuItems: MenuItem[] = [\r\n    { name: t(\"header.home\"), key: \"home\", path: \"/\" },\r\n    {\r\n      name: t(\"header.introduce\"),\r\n      key: \"introduce\",\r\n      path: \"/introduce\",\r\n      children: [\r\n        { name: t(\"header.company\"), path: \"/introduce/company\" },\r\n        { name: t(\"header.employee\"), path: \"/introduce/employee\" },\r\n        { name: t(\"header.clauses\"), path: \"/introduce/clauses\" },\r\n      ],\r\n    },\r\n    {\r\n      name: t(\"header.topic\"),\r\n      key: \"topic\",\r\n      children: [\r\n        { name: t(\"header.whereMoney\"), path: \"/topic/where-money\" },\r\n        { name: t(\"header.retire55\"), path: \"/topic/retire-55\" },\r\n        { name: t(\"header.lifetimeMoney\"), path: \"/topic/lifetime-money\" },\r\n      ],\r\n    },\r\n    { name: t(\"header.service\"), key: \"service\", path: \"/service\" },\r\n    {\r\n      name: t(\"header.community\"),\r\n      key: \"community\",\r\n      path: \"/community\",\r\n      children: [\r\n        {\r\n          name: \"Facebook\",\r\n          path: \"https://facebook.com\",\r\n          icon: <FaFacebook className=\"text-blue-600\" />,\r\n        },\r\n        {\r\n          name: \"YouTube\",\r\n          path: \"https://youtube.com\",\r\n          icon: <FaYoutube className=\"text-red-600\" />,\r\n        },\r\n        {\r\n          name: \"LinkedIn\",\r\n          path: \"https://linkedin.com\",\r\n          icon: <FaLinkedin className=\"text-blue-700\" />,\r\n        },\r\n        {\r\n          name: \"TikTok\",\r\n          path: \"https://tiktok.com\",\r\n          icon: <FaTiktok className=\"text-black\" />,\r\n        },\r\n      ],\r\n    },\r\n    { name: t(\"header.contact\"), key: \"contact\", path: \"/contact\" },\r\n  ];\r\n\r\n  const handleLanguageChange = (lang: \"en\" | \"vi\") => {\r\n    setLanguage(lang);\r\n    setIsOpenLang(false);\r\n  };\r\n\r\n  // click outside cho language\r\n  useEffect(() => {\r\n    function handleClickOutside(event: MouseEvent) {\r\n      if (langRef.current && !langRef.current.contains(event.target as Node)) {\r\n        setIsOpenLang(false);\r\n      }\r\n    }\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n  // scroll effect tối ưu với requestAnimationFrame\r\n  useEffect(() => {\r\n    let ticking = false;\r\n\r\n    function handleScroll() {\r\n      if (!ticking) {\r\n        window.requestAnimationFrame(() => {\r\n          setIsScrolled(window.scrollY > 50);\r\n          ticking = false;\r\n        });\r\n        ticking = true;\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n    return () => window.removeEventListener(\"scroll\", handleScroll);\r\n  }, []);\r\n\r\n  return (\r\n    <header\r\n      className={`w-full flex flex-col items-center z-50 transition-all duration-500 ease-in-out\r\n      ${isScrolled ? \"fixed top-0 bg-white shadow-md py-2\" : \"relative bg-transparent\"}`}\r\n    >\r\n      {!isScrolled && (\r\n        <Link href=\"/\" className=\"flex flex-col items-center transition-all duration-500 ease-in-out\">\r\n          <Image src={Logo} alt=\"Logo\" width={360} height={360} />\r\n        </Link>\r\n      )}\r\n      {!isScrolled && (\r\n        <div className=\"w-[85%] border-t border-green-800 transition-all duration-500 ease-in-out\"></div>\r\n      )}\r\n\r\n      <nav\r\n        className={`transition-all duration-500 ease-in-out\r\n        ${isScrolled\r\n          ? \"w-[90%] flex items-center justify-around py-2\"\r\n          : \"w-[85%] flex items-center justify-center py-4\"\r\n        }`}\r\n      >\r\n        {isScrolled && (\r\n          <Link href=\"/\" className=\"hidden md:flex items-center transition-all duration-500 ease-in-out\">\r\n            <Image src={LogoSmall} alt=\"Logo Small\" width={200} height={200} />\r\n          </Link>\r\n        )}\r\n\r\n        {/* Desktop Menu */}\r\n        <div className=\"hidden md:flex gap-10 items-center\">\r\n          {menuItems.map((item) => {\r\n            const isActive = (() => {\r\n              if (item.path === \"/\") {\r\n                return pathname === \"/\" || pathname === \"/home\";\r\n              }\r\n              if (item.children) {\r\n                return item.children.some(\r\n                  (child) => child.path && pathname.startsWith(child.path)\r\n                );\r\n              }\r\n              if (item.path) {\r\n                return pathname.startsWith(item.path);\r\n              }\r\n              return false;\r\n            })();\r\n\r\n            return item.children ? (\r\n              <div \r\n                key={item.name} \r\n                className=\"relative\"\r\n                onMouseEnter={() => setOpenDropdown(item.name)}\r\n                onMouseLeave={() => setOpenDropdown(null)}\r\n              >\r\n                <button\r\n                   className={`font-semibold flex items-center gap-1 cursor-pointer hover:text-green-700 transition-colors relative ${\r\n                    isActive ? \"text-green-800\" : \"text-gray-800\"\r\n                  }`}\r\n                >\r\n                  {item.name} <ChevronDown size={16} />\r\n                   {isActive && (\r\n                    <span className=\"absolute -bottom-1 left-0 right-0 h-0.5 bg-green-800\"></span>\r\n                  )}\r\n                </button>\r\n                {openDropdown === item.name && (\r\n                  <div className=\"absolute left-0 top-full pt-2 w-52 z-50\">\r\n                    <div className=\"bg-white border border-gray-200 rounded shadow-lg flex flex-col py-2 transition-all duration-300\">\r\n                      {item.children.map((child) => (\r\n                        <Link\r\n                          key={child.name}\r\n                          href={child.path}\r\n                          target={child.path.startsWith(\"http\") ? \"_blank\" : \"_self\"}\r\n                          className={`flex items-center gap-2 px-4 py-2 hover:bg-gray-100 text-gray-700 whitespace-nowrap ${\r\n                            pathname === child.path\r\n                              ? \"font-semibold text-green-800\"\r\n                              : \"\"\r\n                          }`}\r\n                          onClick={() => setOpenDropdown(null)}\r\n                        >\r\n                          {child.icon && <span>{child.icon}</span>}\r\n                          {child.name}\r\n                        </Link>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <Link\r\n                key={item.name}\r\n                href={item.path!}\r\n                className={`font-semibold hover:text-green-700 transition-colors relative ${\r\n                  isActive ? \"text-green-800\" : \"text-gray-800\"\r\n                }`}\r\n              >\r\n                {item.name}\r\n                  {/* ✅ Active line indicator */}\r\n                {isActive && (\r\n                  <span className=\"absolute -bottom-1 left-0 right-0 h-0.5 bg-green-800\"></span>\r\n                )}\r\n              </Link>\r\n            );\r\n          })}\r\n\r\n          {/* Language Dropdown */}\r\n          <div className=\"relative\" ref={langRef}>\r\n            <button\r\n              className=\"flex items-center gap-1\"\r\n              onClick={() => setIsOpenLang(!isOpenLang)}\r\n            >\r\n              <Image\r\n                src={language === \"vi\" ? FlagVN : FlagEN}\r\n                alt={language === \"vi\" ? \"VN\" : \"EN\"}\r\n                width={24}\r\n                height={24}\r\n              />\r\n              <ChevronDown size={16} />\r\n            </button>\r\n            {isOpenLang && (\r\n              <div className=\"absolute right-0 mt-2 w-36 bg-white border border-gray-200 rounded shadow-lg flex flex-col transition-all duration-300 z-50\">\r\n                <button\r\n                  className=\"flex items-center gap-2 px-3 py-2 hover:bg-gray-100 text-left\"\r\n                  onClick={() => handleLanguageChange(\"vi\")}\r\n                >\r\n                  <Image src={FlagVN} alt=\"VN\" width={20} height={20} />\r\n                  {t(\"header.language.vietnamese\")}\r\n                </button>\r\n                <button\r\n                  className=\"flex items-center gap-2 px-3 py-2 hover:bg-gray-100 text-left\"\r\n                  onClick={() => handleLanguageChange(\"en\")}\r\n                >\r\n                  <Image src={FlagEN} alt=\"EN\" width={20} height={20} />\r\n                  {t(\"header.language.english\")}\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Mobile Menu Button */}\r\n        <div className=\"md:hidden flex items-center ml-auto\">\r\n          <button onClick={() => setIsMenuOpen(!isMenuOpen)}>\r\n            {isMenuOpen ? <X size={28} /> : <Menu size={28} />}\r\n          </button>\r\n        </div>\r\n      </nav>\r\n\r\n      {/* Mobile Dropdown Menu */}\r\n      {isMenuOpen && (\r\n        <div className=\"md:hidden w-full bg-white shadow-lg px-6 py-4 flex flex-col gap-4 transition-all duration-300 ease-in-out\">\r\n          {menuItems.map((item) =>\r\n            item.children ? (\r\n              <div key={item.name} className=\"flex flex-col\">\r\n                <button\r\n                  className=\"flex items-center justify-between font-semibold text-gray-800\"\r\n                  onClick={() =>\r\n                    setOpenDropdown(openDropdown === item.name ? null : item.name)\r\n                  }\r\n                >\r\n                  {item.name} <ChevronDown size={16} />\r\n                </button>\r\n                {openDropdown === item.name && (\r\n                  <div className=\"ml-4 mt-2 flex flex-col gap-2 transition-all duration-300\">\r\n                    {item.children.map((child) => (\r\n                      <Link\r\n                        key={child.name}\r\n                        href={child.path}\r\n                        target={child.path.startsWith(\"http\") ? \"_blank\" : \"_self\"}\r\n                        className={`flex items-center gap-2 text-gray-600 hover:text-green-700 ${\r\n                          pathname === child.path\r\n                            ? \"font-semibold text-green-800\"\r\n                            : \"\"\r\n                        }`}\r\n                        onClick={() => setIsMenuOpen(false)}\r\n                      >\r\n                        {child.icon && <span>{child.icon}</span>}\r\n                        {child.name}\r\n                      </Link>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <Link\r\n                key={item.name}\r\n                href={item.path!}\r\n                className={`font-semibold hover:text-green-700 transition-colors ${\r\n                  pathname === item.path ? \"text-green-800\" : \"text-gray-800\"\r\n                }`}\r\n                onClick={() => setIsMenuOpen(false)}\r\n              >\r\n                {item.name}\r\n              </Link>\r\n            )\r\n          )}\r\n        </div>\r\n      )}\r\n    </header>\r\n  );\r\n}"
        }
    ]
}