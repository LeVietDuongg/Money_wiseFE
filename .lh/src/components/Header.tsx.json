{
    "sourceFile": "src/components/Header.tsx",
    "activeCommit": 0,
    "commits": [
        {
<<<<<<< Updated upstream
            "activePatchIndex": 1,
=======
            "activePatchIndex": 5,
>>>>>>> Stashed changes
            "patches": [
                {
                    "date": 1759724299326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759725501294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,47 +8,57 @@\n import LogoSmall from \"../../public/Logo_left.svg\";\r\n import FlagVN from \"../../public/vietnam.png\";\r\n import FlagEN from \"../../public/english.png\";\r\n import { ChevronDown, Menu, X } from \"lucide-react\";\r\n+import { useLanguage } from \"@/contexts/LanguageContext\";\r\n \r\n export default function Header() {\r\n   const [isOpenLang, setIsOpenLang] = useState(false);\r\n   const [isScrolled, setIsScrolled] = useState(false);\r\n   const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n   const [openDropdown, setOpenDropdown] = useState<string | null>(null);\r\n   const langRef = useRef<HTMLDivElement>(null);\r\n   const pathname = usePathname();\r\n+  const { language, setLanguage, t } = useLanguage();\r\n \r\n   const menuItems = [\r\n-    { name: \"HOME\", path: \"/\" },\r\n+    { name: t(\"header.home\"), key: \"home\", path: \"/\" },\r\n     {\r\n-      name: \"INTRODUCE\",\r\n+      name: t(\"header.introduce\"),\r\n+      key: \"introduce\",\r\n       path: \"/introduce\",\r\n       children: [\r\n-        { name: \"Company\", path: \"/introduce/company\" },\r\n-        { name: \"Employee\", path: \"/introduce/employee\" },\r\n+        { name: t(\"header.company\"), path: \"/introduce/company\" },\r\n+        { name: t(\"header.employee\"), path: \"/introduce/employee\" },\r\n       ],\r\n     },\r\n     {\r\n-      name: \"TOPIC\",\r\n+      name: t(\"header.topic\"),\r\n+      key: \"topic\",\r\n       children: [\r\n-        { name: \"Where money\", path: \"/topic/where-money\" },\r\n-        { name: \"Retire 55`\", path: \"/topic/retire-55\" },\r\n-        { name: \"Lifetime money\", path: \"/topic/lifetime-money\" },\r\n+        { name: t(\"header.whereMoney\"), path: \"/topic/where-money\" },\r\n+        { name: t(\"header.retire55\"), path: \"/topic/retire-55\" },\r\n+        { name: t(\"header.lifetimeMoney\"), path: \"/topic/lifetime-money\" },\r\n       ],\r\n     },\r\n-    { name: \"SERVICE\", path: \"/service\" },\r\n+    { name: t(\"header.service\"), key: \"service\", path: \"/service\" },\r\n     { \r\n-      name: \"COMMUNITY\",\r\n+      name: t(\"header.community\"),\r\n+      key: \"community\",\r\n        path: \"/community\",\r\n        children:[\r\n-        {name: \"Facebook\",path:\"http://facebook.com\"},\r\n-        {name:\"Youtube\",path:\"https://youtube.com\"}\r\n+        {name: t(\"header.facebook\"),path:\"http://facebook.com\"},\r\n+        {name: t(\"header.youtube\"),path:\"https://youtube.com\"}\r\n        ]\r\n        },\r\n-    { name: \"CONTACT\", path: \"/contact\" },\r\n+    { name: t(\"header.contact\"), key: \"contact\", path: \"/contact\" },\r\n   ];\r\n \r\n+  const handleLanguageChange = (lang: 'en' | 'vi') => {\r\n+    setLanguage(lang);\r\n+    setIsOpenLang(false);\r\n+  };\r\n+\r\n   // click outside cho language\r\n   useEffect(() => {\r\n     function handleClickOutside(event: MouseEvent) {\r\n       if (langRef.current && !langRef.current.contains(event.target as Node)) {\r\n@@ -163,19 +173,31 @@\n             <button\r\n               className=\"flex items-center gap-1\"\r\n               onClick={() => setIsOpenLang(!isOpenLang)}\r\n             >\r\n-              <Image src={FlagVN} alt=\"VN\" width={24} height={24} />\r\n+              <Image \r\n+                src={language === 'vi' ? FlagVN : FlagEN} \r\n+                alt={language === 'vi' ? 'VN' : 'EN'} \r\n+                width={24} \r\n+                height={24} \r\n+              />\r\n               <ChevronDown size={16} />\r\n             </button>\r\n             {isOpenLang && (\r\n-              <div className=\"absolute right-0 mt-2 w-36 bg-white border border-gray-200 rounded shadow-lg flex flex-col transition-all duration-300\">\r\n-                <button className=\"flex items-center gap-2 px-3 py-2 hover:bg-gray-100 text-left\">\r\n-                  <Image src={FlagVN} alt=\"VN\" width={20} height={20} /> Tiếng\r\n-                  Việt\r\n+              <div className=\"absolute right-0 mt-2 w-36 bg-white border border-gray-200 rounded shadow-lg flex flex-col transition-all duration-300 z-50\">\r\n+                <button \r\n+                  className=\"flex items-center gap-2 px-3 py-2 hover:bg-gray-100 text-left\"\r\n+                  onClick={() => handleLanguageChange('vi')}\r\n+                >\r\n+                  <Image src={FlagVN} alt=\"VN\" width={20} height={20} />\r\n+                  {t(\"header.language.vietnamese\")}\r\n                 </button>\r\n-                <button className=\"flex items-center gap-2 px-3 py-2 hover:bg-gray-100 text-left\">\r\n-                  <Image src={FlagEN} alt=\"EN\" width={20} height={20} /> English\r\n+                <button \r\n+                  className=\"flex items-center gap-2 px-3 py-2 hover:bg-gray-100 text-left\"\r\n+                  onClick={() => handleLanguageChange('en')}\r\n+                >\r\n+                  <Image src={FlagEN} alt=\"EN\" width={20} height={20} />\r\n+                  {t(\"header.language.english\")}\r\n                 </button>\r\n               </div>\r\n             )}\r\n           </div>\r\n"
<<<<<<< Updated upstream
=======
                },
                {
                    "date": 1759983548373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import LogoSmall from \"../../public/Logo_left.svg\";\r\n import FlagVN from \"../../public/vietnam.png\";\r\n import FlagEN from \"../../public/english.png\";\r\n import { ChevronDown, Menu, X } from \"lucide-react\";\r\n+import { FaFacebook, FaYoutube, FaLinkedin, FaTiktok } from \"react-icons/fa\";\r\n import { useLanguage } from \"@/contexts/LanguageContext\";\r\n \r\n export default function Header() {\r\n   const [isOpenLang, setIsOpenLang] = useState(false);\r\n@@ -18,10 +19,22 @@\n   const [openDropdown, setOpenDropdown] = useState<string | null>(null);\r\n   const langRef = useRef<HTMLDivElement>(null);\r\n   const pathname = usePathname();\r\n   const { language, setLanguage, t } = useLanguage();\r\n+type MenuChild = {\r\n+  name: string;\r\n+  path: string;\r\n+  icon?: React.ReactNode;\r\n+};\r\n \r\n-  const menuItems = [\r\n+type MenuItem = {\r\n+  name: string;\r\n+  key: string;\r\n+  path?: string;\r\n+  children?: MenuChild[];\r\n+};\r\n+\r\n+  const menuItems: MenuItem[] = [\r\n     { name: t(\"header.home\"), key: \"home\", path: \"/\" },\r\n     {\r\n       name: t(\"header.introduce\"),\r\n       key: \"introduce\",\r\n@@ -40,21 +53,39 @@\n         { name: t(\"header.lifetimeMoney\"), path: \"/topic/lifetime-money\" },\r\n       ],\r\n     },\r\n     { name: t(\"header.service\"), key: \"service\", path: \"/service\" },\r\n-    { \r\n+    {\r\n       name: t(\"header.community\"),\r\n       key: \"community\",\r\n-       path: \"/community\",\r\n-       children:[\r\n-        {name: t(\"header.facebook\"),path:\"http://facebook.com\"},\r\n-        {name: t(\"header.youtube\"),path:\"https://youtube.com\"}\r\n-       ]\r\n-       },\r\n+      path: \"/community\",\r\n+      children: [\r\n+        {\r\n+          name: \"Facebook\",\r\n+          path: \"https://www.facebook.com/LarryTruong8\",\r\n+          icon: <FaFacebook className=\"text-blue-600\" />,\r\n+        },\r\n+        {\r\n+          name: \"YouTube\",\r\n+          path: \"https://youtube.com\",\r\n+          icon: <FaYoutube className=\"text-red-600\" />,\r\n+        },\r\n+        {\r\n+          name: \"LinkedIn\",\r\n+          path: \"https://linkedin.com\",\r\n+          icon: <FaLinkedin className=\"text-blue-700\" />,\r\n+        },\r\n+        {\r\n+          name: \"TikTok\",\r\n+          path: \"https://tiktok.com\",\r\n+          icon: <FaTiktok className=\"text-black\" />,\r\n+        },\r\n+      ],\r\n+    },\r\n     { name: t(\"header.contact\"), key: \"contact\", path: \"/contact\" },\r\n   ];\r\n \r\n-  const handleLanguageChange = (lang: 'en' | 'vi') => {\r\n+  const handleLanguageChange = (lang: \"en\" | \"vi\") => {\r\n     setLanguage(lang);\r\n     setIsOpenLang(false);\r\n   };\r\n \r\n@@ -89,17 +120,17 @@\n \r\n   return (\r\n     <header\r\n       className={`w-full flex flex-col items-center z-50 transition-all duration-500 ease-in-out\r\n-      ${isScrolled ? \"fixed top-0 bg-white shadow-md py-2\" : \"relative bg-transparent py-6\"}`}\r\n+      ${isScrolled ? \"fixed top-0 bg-white shadow-md py-2\" : \"relative bg-transparent\"}`}\r\n     >\r\n       {!isScrolled && (\r\n-        <div className=\"flex flex-col items-center mt-2 transition-all duration-500 ease-in-out\">\r\n+        <div className=\"flex flex-col items-center transition-all duration-500 ease-in-out\">\r\n           <Image src={Logo} alt=\"Logo\" width={360} height={360} />\r\n         </div>\r\n       )}\r\n       {!isScrolled && (\r\n-        <div className=\"w-[85%] border-t border-green-800 mt-4 transition-all duration-500 ease-in-out\"></div>\r\n+        <div className=\"w-[85%] border-t border-green-800 transition-all duration-500 ease-in-out\"></div>\r\n       )}\r\n \r\n       <nav\r\n         className={`transition-all duration-500 ease-in-out\r\n@@ -109,9 +140,9 @@\n         }`}\r\n       >\r\n         {isScrolled && (\r\n           <div className=\"hidden md:flex items-center transition-all duration-500 ease-in-out\">\r\n-            <Image src={LogoSmall} alt=\"Logo Small\" width={120} height={120} />\r\n+            <Image src={LogoSmall} alt=\"Logo Small\" width={200} height={200} />\r\n           </div>\r\n         )}\r\n \r\n         {/* Desktop Menu */}\r\n@@ -136,20 +167,22 @@\n                 >\r\n                   {item.name} <ChevronDown size={16} />\r\n                 </button>\r\n                 {openDropdown === item.name && (\r\n-                  <div className=\"absolute left-0 mt-2 w-48 bg-white border border-gray-200 rounded shadow-lg flex flex-col pt-2 pb-2 z-50 transition-all duration-300\">\r\n+                  <div className=\"absolute left-0 mt-2 w-52 bg-white border border-gray-200 rounded shadow-lg flex flex-col pt-2 pb-2 z-50 transition-all duration-300\">\r\n                     {item.children.map((child) => (\r\n                       <Link\r\n                         key={child.name}\r\n                         href={child.path}\r\n-                        className={`px-4 py-2 hover:bg-gray-100 text-gray-700 whitespace-nowrap ${\r\n+                        target={child.path.startsWith(\"http\") ? \"_blank\" : \"_self\"}\r\n+                        className={`flex items-center gap-2 px-4 py-2 hover:bg-gray-100 text-gray-700 whitespace-nowrap ${\r\n                           pathname === child.path\r\n                             ? \"font-semibold text-green-800\"\r\n                             : \"\"\r\n                         }`}\r\n                         onClick={() => setOpenDropdown(null)}\r\n                       >\r\n+                        {child.icon && <span>{child.icon}</span>}\r\n                         {child.name}\r\n                       </Link>\r\n                     ))}\r\n                   </div>\r\n@@ -173,28 +206,28 @@\n             <button\r\n               className=\"flex items-center gap-1\"\r\n               onClick={() => setIsOpenLang(!isOpenLang)}\r\n             >\r\n-              <Image \r\n-                src={language === 'vi' ? FlagVN : FlagEN} \r\n-                alt={language === 'vi' ? 'VN' : 'EN'} \r\n-                width={24} \r\n-                height={24} \r\n+              <Image\r\n+                src={language === \"vi\" ? FlagVN : FlagEN}\r\n+                alt={language === \"vi\" ? \"VN\" : \"EN\"}\r\n+                width={24}\r\n+                height={24}\r\n               />\r\n               <ChevronDown size={16} />\r\n             </button>\r\n             {isOpenLang && (\r\n               <div className=\"absolute right-0 mt-2 w-36 bg-white border border-gray-200 rounded shadow-lg flex flex-col transition-all duration-300 z-50\">\r\n-                <button \r\n+                <button\r\n                   className=\"flex items-center gap-2 px-3 py-2 hover:bg-gray-100 text-left\"\r\n-                  onClick={() => handleLanguageChange('vi')}\r\n+                  onClick={() => handleLanguageChange(\"vi\")}\r\n                 >\r\n                   <Image src={FlagVN} alt=\"VN\" width={20} height={20} />\r\n                   {t(\"header.language.vietnamese\")}\r\n                 </button>\r\n-                <button \r\n+                <button\r\n                   className=\"flex items-center gap-2 px-3 py-2 hover:bg-gray-100 text-left\"\r\n-                  onClick={() => handleLanguageChange('en')}\r\n+                  onClick={() => handleLanguageChange(\"en\")}\r\n                 >\r\n                   <Image src={FlagEN} alt=\"EN\" width={20} height={20} />\r\n                   {t(\"header.language.english\")}\r\n                 </button>\r\n@@ -230,15 +263,17 @@\n                     {item.children.map((child) => (\r\n                       <Link\r\n                         key={child.name}\r\n                         href={child.path}\r\n-                        className={`text-gray-600 hover:text-green-700 ${\r\n+                        target={child.path.startsWith(\"http\") ? \"_blank\" : \"_self\"}\r\n+                        className={`flex items-center gap-2 text-gray-600 hover:text-green-700 ${\r\n                           pathname === child.path\r\n                             ? \"font-semibold text-green-800\"\r\n                             : \"\"\r\n                         }`}\r\n-                        onClick={() => setIsMenuOpen(false)} // đóng menu mobile\r\n+                        onClick={() => setIsMenuOpen(false)}\r\n                       >\r\n+                        {child.icon && <span>{child.icon}</span>}\r\n                         {child.name}\r\n                       </Link>\r\n                     ))}\r\n                   </div>\r\n"
                },
                {
                    "date": 1760000602008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,16 +157,19 @@\n \r\n             return item.children ? (\r\n               <div key={item.name} className=\"relative\">\r\n                 <button\r\n-                  className={`font-semibold flex items-center gap-1 cursor-pointer hover:text-green-700 transition-colors ${\r\n+                  className={`font-semibold flex items-center gap-1 cursor-pointer hover:text-green-700 transition-colors relative pb-1 ${\r\n                     isActive ? \"text-green-800\" : \"text-gray-800\"\r\n                   }`}\r\n                   onClick={() =>\r\n                     setOpenDropdown(openDropdown === item.name ? null : item.name)\r\n                   }\r\n                 >\r\n                   {item.name} <ChevronDown size={16} />\r\n+                  {isActive && (\r\n+                    <span className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-green-700\"></span>\r\n+                  )}\r\n                 </button>\r\n                 {openDropdown === item.name && (\r\n                   <div className=\"absolute left-0 mt-2 w-52 bg-white border border-gray-200 rounded shadow-lg flex flex-col pt-2 pb-2 z-50 transition-all duration-300\">\r\n                     {item.children.map((child) => (\r\n@@ -191,13 +194,16 @@\n             ) : (\r\n               <Link\r\n                 key={item.name}\r\n                 href={item.path!}\r\n-                className={`font-semibold hover:text-green-700 transition-colors ${\r\n+                className={`font-semibold hover:text-green-700 transition-colors relative pb-1 ${\r\n                   isActive ? \"text-green-800\" : \"text-gray-800\"\r\n                 }`}\r\n               >\r\n                 {item.name}\r\n+                {isActive && (\r\n+                  <span className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-green-700\"></span>\r\n+                )}\r\n               </Link>\r\n             );\r\n           })}\r\n \r\n@@ -282,14 +288,17 @@\n             ) : (\r\n               <Link\r\n                 key={item.name}\r\n                 href={item.path!}\r\n-                className={`font-semibold hover:text-green-700 transition-colors ${\r\n+                className={`font-semibold hover:text-green-700 transition-colors relative pb-1 ${\r\n                   pathname === item.path ? \"text-green-800\" : \"text-gray-800\"\r\n                 }`}\r\n                 onClick={() => setIsMenuOpen(false)}\r\n               >\r\n                 {item.name}\r\n+                {pathname === item.path && (\r\n+                  <span className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-green-700\"></span>\r\n+                )}\r\n               </Link>\r\n             )\r\n           )}\r\n         </div>\r\n"
                },
                {
                    "date": 1760000829912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,12 +164,15 @@\n                   onClick={() =>\r\n                     setOpenDropdown(openDropdown === item.name ? null : item.name)\r\n                   }\r\n                 >\r\n-                  {item.name} <ChevronDown size={16} />\r\n-                  {isActive && (\r\n-                    <span className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-green-700\"></span>\r\n-                  )}\r\n+                  <span className=\"relative\">\r\n+                    {item.name}\r\n+                    {isActive && (\r\n+                      <span className=\"absolute -bottom-1 left-0 right-0 h-0.5 bg-green-700\"></span>\r\n+                    )}\r\n+                  </span>\r\n+                  <ChevronDown size={16} />\r\n                 </button>\r\n                 {openDropdown === item.name && (\r\n                   <div className=\"absolute left-0 mt-2 w-52 bg-white border border-gray-200 rounded shadow-lg flex flex-col pt-2 pb-2 z-50 transition-all duration-300\">\r\n                     {item.children.map((child) => (\r\n@@ -252,18 +255,30 @@\n \r\n       {/* Mobile Dropdown Menu */}\r\n       {isMenuOpen && (\r\n         <div className=\"md:hidden w-full bg-white shadow-lg px-6 py-4 flex flex-col gap-4 transition-all duration-300 ease-in-out\">\r\n-          {menuItems.map((item) =>\r\n-            item.children ? (\r\n+          {menuItems.map((item) => {\r\n+            const isActive = item.path\r\n+              ? pathname === item.path\r\n+              : item.children?.some((child) => pathname.startsWith(child.path));\r\n+            \r\n+            return item.children ? (\r\n               <div key={item.name} className=\"flex flex-col\">\r\n                 <button\r\n-                  className=\"flex items-center justify-between font-semibold text-gray-800\"\r\n+                  className={`flex items-center justify-between font-semibold relative pb-1 ${\r\n+                    isActive ? \"text-green-800\" : \"text-gray-800\"\r\n+                  }`}\r\n                   onClick={() =>\r\n                     setOpenDropdown(openDropdown === item.name ? null : item.name)\r\n                   }\r\n                 >\r\n-                  {item.name} <ChevronDown size={16} />\r\n+                  <span className=\"relative\">\r\n+                    {item.name}\r\n+                    {isActive && (\r\n+                      <span className=\"absolute -bottom-1 left-0 right-0 h-0.5 bg-green-700\"></span>\r\n+                    )}\r\n+                  </span>\r\n+                  <ChevronDown size={16} />\r\n                 </button>\r\n                 {openDropdown === item.name && (\r\n                   <div className=\"ml-4 mt-2 flex flex-col gap-2 transition-all duration-300\">\r\n                     {item.children.map((child) => (\r\n@@ -298,10 +313,10 @@\n                 {pathname === item.path && (\r\n                   <span className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-green-700\"></span>\r\n                 )}\r\n               </Link>\r\n-            )\r\n-          )}\r\n+            );\r\n+          })}\r\n         </div>\r\n       )}\r\n     </header>\r\n   );\r\n"
                },
                {
                    "date": 1760002985042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,12 @@\n   const [isOpenLang, setIsOpenLang] = useState(false);\r\n   const [isScrolled, setIsScrolled] = useState(false);\r\n   const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n   const [openDropdown, setOpenDropdown] = useState<string | null>(null);\r\n+  const [isHoveringDropdown, setIsHoveringDropdown] = useState(false);\r\n+  const [autoCloseTimer, setAutoCloseTimer] = useState<NodeJS.Timeout | null>(null);\r\n   const langRef = useRef<HTMLDivElement>(null);\r\n+  const dropdownRef = useRef<HTMLDivElement>(null);\r\n   const pathname = usePathname();\r\n   const { language, setLanguage, t } = useLanguage();\r\n type MenuChild = {\r\n   name: string;\r\n@@ -33,13 +36,12 @@\n   children?: MenuChild[];\r\n };\r\n \r\n   const menuItems: MenuItem[] = [\r\n-    { name: t(\"header.home\"), key: \"home\", path: \"/\" },\r\n+    { name: t(\"header.home\"), key: \"home\", path: \"/home\" },\r\n     {\r\n       name: t(\"header.introduce\"),\r\n       key: \"introduce\",\r\n-      path: \"/introduce\",\r\n       children: [\r\n         { name: t(\"header.company\"), path: \"/introduce/company\" },\r\n         { name: t(\"header.employee\"), path: \"/introduce/employee\" },\r\n       ],\r\n@@ -107,17 +109,75 @@\n     function handleScroll() {\r\n       if (!ticking) {\r\n         window.requestAnimationFrame(() => {\r\n           setIsScrolled(window.scrollY > 50);\r\n+          \r\n+          // Đóng dropdown khi scroll và hủy timer nếu có\r\n+          setOpenDropdown(null); \r\n+          if (autoCloseTimer) {\r\n+            clearTimeout(autoCloseTimer);\r\n+            setAutoCloseTimer(null);\r\n+          }\r\n+          \r\n           ticking = false;\r\n         });\r\n         ticking = true;\r\n       }\r\n     }\r\n \r\n     window.addEventListener(\"scroll\", handleScroll);\r\n     return () => window.removeEventListener(\"scroll\", handleScroll);\r\n-  }, []);\r\n+  }, [autoCloseTimer]);\r\n+  \r\n+  // Set up auto-close timer when dropdown opens\r\n+  useEffect(() => {\r\n+    // Khi dropdown mở, thiết lập timer tự động đóng sau 3 giây\r\n+    if (openDropdown) {\r\n+      // Hủy timer cũ nếu có\r\n+      if (autoCloseTimer) {\r\n+        clearTimeout(autoCloseTimer);\r\n+      }\r\n+      \r\n+      // Thiết lập timer mới - 3000ms = 3 giây\r\n+      const timer = setTimeout(() => {\r\n+        if (!isHoveringDropdown) {\r\n+          setOpenDropdown(null);\r\n+        }\r\n+      }, 3000);\r\n+      \r\n+      setAutoCloseTimer(timer);\r\n+    }\r\n+    \r\n+    return () => {\r\n+      if (autoCloseTimer) {\r\n+        clearTimeout(autoCloseTimer);\r\n+      }\r\n+    };\r\n+  }, [openDropdown, isHoveringDropdown]);\r\n+  \r\n+  // Reset timer when hovering status changes\r\n+  useEffect(() => {\r\n+    // Khi di chuột vào dropdown, hủy timer\r\n+    if (isHoveringDropdown && autoCloseTimer) {\r\n+      clearTimeout(autoCloseTimer);\r\n+      setAutoCloseTimer(null);\r\n+    } \r\n+    // Khi di chuột ra khỏi dropdown và vẫn có dropdown đang mở\r\n+    else if (!isHoveringDropdown && openDropdown) {\r\n+      // Thiết lập timer mới - 3000ms = 3 giây\r\n+      const timer = setTimeout(() => {\r\n+        setOpenDropdown(null);\r\n+      }, 3000);\r\n+      \r\n+      setAutoCloseTimer(timer);\r\n+    }\r\n+    \r\n+    return () => {\r\n+      if (autoCloseTimer) {\r\n+        clearTimeout(autoCloseTimer);\r\n+      }\r\n+    };\r\n+  }, [isHoveringDropdown, openDropdown]);\r\n \r\n   return (\r\n     <header\r\n       className={`w-full flex flex-col items-center z-50 transition-all duration-500 ease-in-out\r\n@@ -163,8 +223,23 @@\n                   }`}\r\n                   onClick={() =>\r\n                     setOpenDropdown(openDropdown === item.name ? null : item.name)\r\n                   }\r\n+                  onMouseEnter={() => {\r\n+                    // Khi hover vào button của dropdown đang mở\r\n+                    if (openDropdown === item.name) {\r\n+                      setIsHoveringDropdown(true);\r\n+                    } else if (openDropdown !== item.name) {\r\n+                      // Khi hover vào button khác, mở dropdown mới\r\n+                      setOpenDropdown(item.name);\r\n+                      setIsHoveringDropdown(true);\r\n+                    }\r\n+                  }}\r\n+                  onMouseLeave={() => {\r\n+                    setIsHoveringDropdown(false);\r\n+                    // Không cần đóng dropdown ngay lập tức khi rời button\r\n+                    // Timer đã được thiết lập trong useEffect sẽ xử lý\r\n+                  }}\r\n                 >\r\n                   <span className=\"relative\">\r\n                     {item.name}\r\n                     {isActive && (\r\n@@ -173,9 +248,28 @@\n                   </span>\r\n                   <ChevronDown size={16} />\r\n                 </button>\r\n                 {openDropdown === item.name && (\r\n-                  <div className=\"absolute left-0 mt-2 w-52 bg-white border border-gray-200 rounded shadow-lg flex flex-col pt-2 pb-2 z-50 transition-all duration-300\">\r\n+                  <div \r\n+                    ref={dropdownRef}\r\n+                    className=\"absolute left-0 mt-2 w-52 bg-white border border-gray-200 rounded shadow-lg flex flex-col pt-2 pb-2 z-50 transition-all duration-300\"\r\n+                    onMouseEnter={() => {\r\n+                      setIsHoveringDropdown(true);\r\n+                      // Khi rê chuột vào dropdown, hủy timer đóng\r\n+                      if (autoCloseTimer) {\r\n+                        clearTimeout(autoCloseTimer);\r\n+                        setAutoCloseTimer(null);\r\n+                      }\r\n+                    }}\r\n+                    onMouseLeave={() => {\r\n+                      setIsHoveringDropdown(false);\r\n+                      // Khi rê chuột ra, thiết lập timer đóng dropdown sau 3 giây\r\n+                      const timer = setTimeout(() => {\r\n+                        setOpenDropdown(null);\r\n+                      }, 3000);\r\n+                      setAutoCloseTimer(timer);\r\n+                    }}\r\n+                  >\r\n                     {item.children.map((child) => (\r\n                       <Link\r\n                         key={child.name}\r\n                         href={child.path}\r\n"
>>>>>>> Stashed changes
                }
            ],
            "date": 1759724299326,
            "name": "Commit-0",
            "content": "\"use client\";\r\n\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport Image from \"next/image\";\r\nimport Link from \"next/link\";\r\nimport { usePathname } from \"next/navigation\";\r\nimport Logo from \"../../public/Logo.svg\";\r\nimport LogoSmall from \"../../public/Logo_left.svg\";\r\nimport FlagVN from \"../../public/vietnam.png\";\r\nimport FlagEN from \"../../public/english.png\";\r\nimport { ChevronDown, Menu, X } from \"lucide-react\";\r\n\r\nexport default function Header() {\r\n  const [isOpenLang, setIsOpenLang] = useState(false);\r\n  const [isScrolled, setIsScrolled] = useState(false);\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n  const [openDropdown, setOpenDropdown] = useState<string | null>(null);\r\n  const langRef = useRef<HTMLDivElement>(null);\r\n  const pathname = usePathname();\r\n\r\n  const menuItems = [\r\n    { name: \"HOME\", path: \"/\" },\r\n    {\r\n      name: \"INTRODUCE\",\r\n      path: \"/introduce\",\r\n      children: [\r\n        { name: \"Company\", path: \"/introduce/company\" },\r\n        { name: \"Employee\", path: \"/introduce/employee\" },\r\n      ],\r\n    },\r\n    {\r\n      name: \"TOPIC\",\r\n      children: [\r\n        { name: \"Where money\", path: \"/topic/where-money\" },\r\n        { name: \"Retire 55`\", path: \"/topic/retire-55\" },\r\n        { name: \"Lifetime money\", path: \"/topic/lifetime-money\" },\r\n      ],\r\n    },\r\n    { name: \"SERVICE\", path: \"/service\" },\r\n    { \r\n      name: \"COMMUNITY\",\r\n       path: \"/community\",\r\n       children:[\r\n        {name: \"Facebook\",path:\"http://facebook.com\"},\r\n        {name:\"Youtube\",path:\"https://youtube.com\"}\r\n       ]\r\n       },\r\n    { name: \"CONTACT\", path: \"/contact\" },\r\n  ];\r\n\r\n  // click outside cho language\r\n  useEffect(() => {\r\n    function handleClickOutside(event: MouseEvent) {\r\n      if (langRef.current && !langRef.current.contains(event.target as Node)) {\r\n        setIsOpenLang(false);\r\n      }\r\n    }\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n  // scroll effect tối ưu với requestAnimationFrame\r\n  useEffect(() => {\r\n    let ticking = false;\r\n\r\n    function handleScroll() {\r\n      if (!ticking) {\r\n        window.requestAnimationFrame(() => {\r\n          setIsScrolled(window.scrollY > 50);\r\n          ticking = false;\r\n        });\r\n        ticking = true;\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"scroll\", handleScroll);\r\n    return () => window.removeEventListener(\"scroll\", handleScroll);\r\n  }, []);\r\n\r\n  return (\r\n    <header\r\n      className={`w-full flex flex-col items-center z-50 transition-all duration-500 ease-in-out\r\n      ${isScrolled ? \"fixed top-0 bg-white shadow-md py-2\" : \"relative bg-transparent py-6\"}`}\r\n    >\r\n      {!isScrolled && (\r\n        <div className=\"flex flex-col items-center mt-2 transition-all duration-500 ease-in-out\">\r\n          <Image src={Logo} alt=\"Logo\" width={360} height={360} />\r\n        </div>\r\n      )}\r\n      {!isScrolled && (\r\n        <div className=\"w-[85%] border-t border-green-800 mt-4 transition-all duration-500 ease-in-out\"></div>\r\n      )}\r\n\r\n      <nav\r\n        className={`transition-all duration-500 ease-in-out\r\n        ${isScrolled\r\n          ? \"w-[90%] flex items-center justify-around py-2\"\r\n          : \"w-[85%] flex items-center justify-center py-4\"\r\n        }`}\r\n      >\r\n        {isScrolled && (\r\n          <div className=\"hidden md:flex items-center transition-all duration-500 ease-in-out\">\r\n            <Image src={LogoSmall} alt=\"Logo Small\" width={120} height={120} />\r\n          </div>\r\n        )}\r\n\r\n        {/* Desktop Menu */}\r\n        <div className=\"hidden md:flex gap-10 items-center\">\r\n          {menuItems.map((item) => {\r\n            const isActive =\r\n              item.path\r\n                ? pathname === item.path\r\n                : item.children?.some((child) =>\r\n                    pathname.startsWith(child.path)\r\n                  );\r\n\r\n            return item.children ? (\r\n              <div key={item.name} className=\"relative\">\r\n                <button\r\n                  className={`font-semibold flex items-center gap-1 cursor-pointer hover:text-green-700 transition-colors ${\r\n                    isActive ? \"text-green-800\" : \"text-gray-800\"\r\n                  }`}\r\n                  onClick={() =>\r\n                    setOpenDropdown(openDropdown === item.name ? null : item.name)\r\n                  }\r\n                >\r\n                  {item.name} <ChevronDown size={16} />\r\n                </button>\r\n                {openDropdown === item.name && (\r\n                  <div className=\"absolute left-0 mt-2 w-48 bg-white border border-gray-200 rounded shadow-lg flex flex-col pt-2 pb-2 z-50 transition-all duration-300\">\r\n                    {item.children.map((child) => (\r\n                      <Link\r\n                        key={child.name}\r\n                        href={child.path}\r\n                        className={`px-4 py-2 hover:bg-gray-100 text-gray-700 whitespace-nowrap ${\r\n                          pathname === child.path\r\n                            ? \"font-semibold text-green-800\"\r\n                            : \"\"\r\n                        }`}\r\n                        onClick={() => setOpenDropdown(null)}\r\n                      >\r\n                        {child.name}\r\n                      </Link>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <Link\r\n                key={item.name}\r\n                href={item.path!}\r\n                className={`font-semibold hover:text-green-700 transition-colors ${\r\n                  isActive ? \"text-green-800\" : \"text-gray-800\"\r\n                }`}\r\n              >\r\n                {item.name}\r\n              </Link>\r\n            );\r\n          })}\r\n\r\n          {/* Language Dropdown */}\r\n          <div className=\"relative\" ref={langRef}>\r\n            <button\r\n              className=\"flex items-center gap-1\"\r\n              onClick={() => setIsOpenLang(!isOpenLang)}\r\n            >\r\n              <Image src={FlagVN} alt=\"VN\" width={24} height={24} />\r\n              <ChevronDown size={16} />\r\n            </button>\r\n            {isOpenLang && (\r\n              <div className=\"absolute right-0 mt-2 w-36 bg-white border border-gray-200 rounded shadow-lg flex flex-col transition-all duration-300\">\r\n                <button className=\"flex items-center gap-2 px-3 py-2 hover:bg-gray-100 text-left\">\r\n                  <Image src={FlagVN} alt=\"VN\" width={20} height={20} /> Tiếng\r\n                  Việt\r\n                </button>\r\n                <button className=\"flex items-center gap-2 px-3 py-2 hover:bg-gray-100 text-left\">\r\n                  <Image src={FlagEN} alt=\"EN\" width={20} height={20} /> English\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Mobile Menu Button */}\r\n        <div className=\"md:hidden flex items-center ml-auto\">\r\n          <button onClick={() => setIsMenuOpen(!isMenuOpen)}>\r\n            {isMenuOpen ? <X size={28} /> : <Menu size={28} />}\r\n          </button>\r\n        </div>\r\n      </nav>\r\n\r\n      {/* Mobile Dropdown Menu */}\r\n      {isMenuOpen && (\r\n        <div className=\"md:hidden w-full bg-white shadow-lg px-6 py-4 flex flex-col gap-4 transition-all duration-300 ease-in-out\">\r\n          {menuItems.map((item) =>\r\n            item.children ? (\r\n              <div key={item.name} className=\"flex flex-col\">\r\n                <button\r\n                  className=\"flex items-center justify-between font-semibold text-gray-800\"\r\n                  onClick={() =>\r\n                    setOpenDropdown(openDropdown === item.name ? null : item.name)\r\n                  }\r\n                >\r\n                  {item.name} <ChevronDown size={16} />\r\n                </button>\r\n                {openDropdown === item.name && (\r\n                  <div className=\"ml-4 mt-2 flex flex-col gap-2 transition-all duration-300\">\r\n                    {item.children.map((child) => (\r\n                      <Link\r\n                        key={child.name}\r\n                        href={child.path}\r\n                        className={`text-gray-600 hover:text-green-700 ${\r\n                          pathname === child.path\r\n                            ? \"font-semibold text-green-800\"\r\n                            : \"\"\r\n                        }`}\r\n                        onClick={() => setIsMenuOpen(false)} // đóng menu mobile\r\n                      >\r\n                        {child.name}\r\n                      </Link>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ) : (\r\n              <Link\r\n                key={item.name}\r\n                href={item.path!}\r\n                className={`font-semibold hover:text-green-700 transition-colors ${\r\n                  pathname === item.path ? \"text-green-800\" : \"text-gray-800\"\r\n                }`}\r\n                onClick={() => setIsMenuOpen(false)}\r\n              >\r\n                {item.name}\r\n              </Link>\r\n            )\r\n          )}\r\n        </div>\r\n      )}\r\n    </header>\r\n  );\r\n}\r\n"
        }
    ]
}