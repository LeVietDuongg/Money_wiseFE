{
    "sourceFile": "src/services/topic.service.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1760079761222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760079796269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,39 @@\n import api from \"./api\";\r\n-import { Topic } from \"@/types/topic\";\r\n+import { Topic, Post } from \"@/types/topic\";\r\n \r\n export const topicService = {\r\n-  /** 🟩 Lấy tất cả topics */\r\n+  /** 🟢 Lấy tất cả topic */\r\n   getAll: async (): Promise<Topic[]> => {\r\n     const res = await api.get(\"/topics\");\r\n-    return Array.isArray(res.data?.topics) ? res.data.topics : [];\r\n+    return res.data.topics; // backend trả { success: true, topics }\r\n   },\r\n \r\n-  /** 🟦 Lấy topic theo slug */\r\n-  getBySlug: async (slug: string): Promise<Topic> => {\r\n+  /** 🟢 Lấy chi tiết 1 topic + danh sách post */\r\n+  getBySlug: async (slug: string): Promise<{ topic: Topic; posts: Post[] }> => {\r\n+    if (!slug) throw new Error(\"Slug is required\");\r\n     const res = await api.get(`/topics/${slug}`);\r\n-    return res.data?.topic || res.data;\r\n+    // backend trả { success, topic, posts }\r\n+    return {\r\n+      topic: res.data.topic,\r\n+      posts: res.data.posts,\r\n+    };\r\n   },\r\n \r\n-  /** 🟨 Tạo mới topic */\r\n-  create: async (data: Partial<Topic>, files?: { banner?: File }): Promise<Topic> => {\r\n-    const formData = new FormData();\r\n-\r\n-    if (files?.banner instanceof File) formData.append(\"banner\", files.banner);\r\n-\r\n-    if (data.slug) formData.append(\"slug\", data.slug.trim());\r\n-    if (data.title) formData.append(\"title\", data.title.trim());\r\n-    if (data.subtitle) formData.append(\"subtitle\", data.subtitle.trim());\r\n-\r\n-    const res = await api.post(\"/topics\", formData, {\r\n-      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-    });\r\n-    return res.data?.topic || res.data;\r\n+  /** 🟢 Tạo topic */\r\n+  create: async (data: Partial<Topic>): Promise<Topic> => {\r\n+    const res = await api.post(\"/topics\", data);\r\n+    return res.data.topic;\r\n   },\r\n \r\n-  /** 🟧 Cập nhật topic */\r\n-  update: async (slug: string, data: Partial<Topic>, files?: { banner?: File }): Promise<Topic> => {\r\n-    const formData = new FormData();\r\n-\r\n-    if (files?.banner instanceof File) formData.append(\"banner\", files.banner);\r\n-\r\n-    if (data.title) formData.append(\"title\", data.title.trim());\r\n-    if (data.subtitle) formData.append(\"subtitle\", data.subtitle.trim());\r\n-\r\n-    const res = await api.put(`/topics/${slug}`, formData, {\r\n-      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n-    });\r\n-    return res.data?.topic || res.data;\r\n+  /** 🟡 Cập nhật topic */\r\n+  update: async (id: string, data: Partial<Topic>): Promise<Topic> => {\r\n+    const res = await api.put(`/topics/${id}`, data);\r\n+    return res.data.topic;\r\n   },\r\n \r\n-  /** 🟥 Xóa topic */\r\n-  delete: async (slug: string): Promise<{ message: string }> => {\r\n-    const res = await api.delete(`/topics/${slug}`);\r\n+  /** 🔴 Xóa topic */\r\n+  delete: async (id: string) => {\r\n+    const res = await api.delete(`/topics/${id}`);\r\n     return res.data;\r\n   },\r\n };\r\n"
                },
                {
                    "date": 1760086090745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,23 @@\n \r\n   /** 🟢 Lấy chi tiết 1 topic + danh sách post */\r\n   getBySlug: async (slug: string): Promise<{ topic: Topic; posts: Post[] }> => {\r\n     if (!slug) throw new Error(\"Slug is required\");\r\n+    \r\n+    console.log(`🔍 Fetching topic with slug: ${slug}`);\r\n     const res = await api.get(`/topics/${slug}`);\r\n+    \r\n+    // 🔍 Debug log để kiểm tra dữ liệu từ MongoDB\r\n+    console.log(\"📊 Topic data:\", res.data.topic);\r\n+    console.log(\"📝 Posts data:\", res.data.posts);\r\n+    \r\n+    // Kiểm tra URL ảnh cụ thể\r\n+    if (res.data.posts) {\r\n+      res.data.posts.forEach((post: Post, index: number) => {\r\n+        console.log(`📷 Post ${index + 1} image URL:`, post.image);\r\n+      });\r\n+    }\r\n+    \r\n     // backend trả { success, topic, posts }\r\n     return {\r\n       topic: res.data.topic,\r\n       posts: res.data.posts,\r\n"
                }
            ],
            "date": 1760079761222,
            "name": "Commit-0",
            "content": "import api from \"./api\";\r\nimport { Topic } from \"@/types/topic\";\r\n\r\nexport const topicService = {\r\n  /** 🟩 Lấy tất cả topics */\r\n  getAll: async (): Promise<Topic[]> => {\r\n    const res = await api.get(\"/topics\");\r\n    return Array.isArray(res.data?.topics) ? res.data.topics : [];\r\n  },\r\n\r\n  /** 🟦 Lấy topic theo slug */\r\n  getBySlug: async (slug: string): Promise<Topic> => {\r\n    const res = await api.get(`/topics/${slug}`);\r\n    return res.data?.topic || res.data;\r\n  },\r\n\r\n  /** 🟨 Tạo mới topic */\r\n  create: async (data: Partial<Topic>, files?: { banner?: File }): Promise<Topic> => {\r\n    const formData = new FormData();\r\n\r\n    if (files?.banner instanceof File) formData.append(\"banner\", files.banner);\r\n\r\n    if (data.slug) formData.append(\"slug\", data.slug.trim());\r\n    if (data.title) formData.append(\"title\", data.title.trim());\r\n    if (data.subtitle) formData.append(\"subtitle\", data.subtitle.trim());\r\n\r\n    const res = await api.post(\"/topics\", formData, {\r\n      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n    });\r\n    return res.data?.topic || res.data;\r\n  },\r\n\r\n  /** 🟧 Cập nhật topic */\r\n  update: async (slug: string, data: Partial<Topic>, files?: { banner?: File }): Promise<Topic> => {\r\n    const formData = new FormData();\r\n\r\n    if (files?.banner instanceof File) formData.append(\"banner\", files.banner);\r\n\r\n    if (data.title) formData.append(\"title\", data.title.trim());\r\n    if (data.subtitle) formData.append(\"subtitle\", data.subtitle.trim());\r\n\r\n    const res = await api.put(`/topics/${slug}`, formData, {\r\n      headers: { \"Content-Type\": \"multipart/form-data\" },\r\n    });\r\n    return res.data?.topic || res.data;\r\n  },\r\n\r\n  /** 🟥 Xóa topic */\r\n  delete: async (slug: string): Promise<{ message: string }> => {\r\n    const res = await api.delete(`/topics/${slug}`);\r\n    return res.data;\r\n  },\r\n};\r\n"
        }
    ]
}