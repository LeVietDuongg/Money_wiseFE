{
    "sourceFile": "I18N_GUIDE.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1759725499835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1759725499835,
            "name": "Commit-0",
            "content": "# i18n Implementation Guide\r\n\r\n## Overview\r\nThe website now supports full internationalization (i18n) using `react-i18next`. Users can switch between Vietnamese (vi) and English (en) languages, and the selection persists across page refreshes.\r\n\r\n## Architecture\r\n\r\n### 1. Core Files\r\n- **`src/i18n/config.ts`** - i18next configuration\r\n- **`src/contexts/LanguageContext.tsx`** - React context for language state management\r\n- **`src/i18n/locales/en/translation.json`** - English translations\r\n- **`src/i18n/locales/vi/translation.json`** - Vietnamese translations\r\n\r\n### 2. Setup\r\nThe `LanguageProvider` wraps the entire app in `src/app/layout.tsx`, making translations available everywhere.\r\n\r\n## How to Use Translations in Components\r\n\r\n### Client Components (recommended)\r\n```tsx\r\n\"use client\";\r\n\r\nimport { useLanguage } from \"@/contexts/LanguageContext\";\r\n\r\nexport default function MyComponent() {\r\n  const { t, language, setLanguage } = useLanguage();\r\n  \r\n  return (\r\n    <div>\r\n      <h1>{t(\"header.home\")}</h1>\r\n      <p>{t(\"contact.address\")}</p>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n### Server Components (if needed)\r\nFor server components, you'll need to convert them to client components by adding `\"use client\"` at the top.\r\n\r\n## Adding New Translations\r\n\r\n### Step 1: Add to Translation Files\r\nAdd your new keys to both language files:\r\n\r\n**`src/i18n/locales/en/translation.json`**\r\n```json\r\n{\r\n  \"mySection\": {\r\n    \"title\": \"My Title\",\r\n    \"description\": \"My Description\"\r\n  }\r\n}\r\n```\r\n\r\n**`src/i18n/locales/vi/translation.json`**\r\n```json\r\n{\r\n  \"mySection\": {\r\n    \"title\": \"Tiêu đề của tôi\",\r\n    \"description\": \"Mô tả của tôi\"\r\n  }\r\n}\r\n```\r\n\r\n### Step 2: Use in Components\r\n```tsx\r\nconst { t } = useLanguage();\r\n\r\n<h1>{t(\"mySection.title\")}</h1>\r\n<p>{t(\"mySection.description\")}</p>\r\n```\r\n\r\n## Current Translation Keys\r\n\r\n### Header Navigation\r\n- `header.home` - Home menu item\r\n- `header.introduce` - Introduce menu item\r\n- `header.topic` - Topic menu item\r\n- `header.service` - Service menu item\r\n- `header.community` - Community menu item\r\n- `header.contact` - Contact menu item\r\n- `header.company` - Company submenu\r\n- `header.employee` - Employee submenu\r\n- `header.whereMoney` - Where money submenu\r\n- `header.retire55` - Retire 55 submenu\r\n- `header.lifetimeMoney` - Lifetime money submenu\r\n- `header.facebook` - Facebook link\r\n- `header.youtube` - Youtube link\r\n- `header.language.vietnamese` - Vietnamese language name\r\n- `header.language.english` - English language name\r\n\r\n### Contact Page\r\n- `contact.contactInfo` - Contact Information\r\n- `contact.address` - Address\r\n- `contact.phone` - Phone number\r\n- `contact.email` - Email\r\n- `contact.sendMessage` - Send message title\r\n- `contact.form.fullName` - Full name placeholder\r\n- `contact.form.email` - Email placeholder\r\n- `contact.form.phone` - Phone placeholder\r\n- `contact.form.subject` - Subject placeholder\r\n- `contact.form.message` - Message placeholder\r\n- `contact.form.submit` - Submit button\r\n- `contact.importantNote` - Important note label\r\n- `contact.noteText` - Note text\r\n\r\n## Features\r\n\r\n### Language Persistence\r\n- Language choice is saved to `localStorage`\r\n- Automatically restored on page reload\r\n\r\n### Language Switching\r\n- Click the flag icon in the header\r\n- Select desired language (Vietnamese or English)\r\n- The entire website updates immediately\r\n\r\n### Current Language Detection\r\n- The flag icon shows the current language\r\n- Vietnamese flag for Vietnamese\r\n- English flag for English\r\n\r\n## Next Steps for Full Implementation\r\n\r\nTo complete the i18n implementation across the entire website:\r\n\r\n1. **Identify all static text** in your components\r\n2. **Add translation keys** to both `en/translation.json` and `vi/translation.json`\r\n3. **Convert components to client components** if they're server components\r\n4. **Import and use `useLanguage` hook**\r\n5. **Replace hardcoded text** with `t(\"key.path\")`\r\n\r\n## Example: Converting a Page\r\n\r\n**Before:**\r\n```tsx\r\nexport default function About() {\r\n  return (\r\n    <div>\r\n      <h1>About Us</h1>\r\n      <p>We are a financial company</p>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n**After:**\r\n```tsx\r\n\"use client\";\r\n\r\nimport { useLanguage } from \"@/contexts/LanguageContext\";\r\n\r\nexport default function About() {\r\n  const { t } = useLanguage();\r\n  \r\n  return (\r\n    <div>\r\n      <h1>{t(\"about.title\")}</h1>\r\n      <p>{t(\"about.description\")}</p>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n**Translation files:**\r\n```json\r\n// en/translation.json\r\n{\r\n  \"about\": {\r\n    \"title\": \"About Us\",\r\n    \"description\": \"We are a financial company\"\r\n  }\r\n}\r\n\r\n// vi/translation.json\r\n{\r\n  \"about\": {\r\n    \"title\": \"Về Chúng Tôi\",\r\n    \"description\": \"Chúng tôi là một công ty tài chính\"\r\n  }\r\n}\r\n```\r\n\r\n## Tips\r\n\r\n1. **Organize by section**: Group related translations together\r\n2. **Use nested objects**: Makes it easier to manage large translation files\r\n3. **Consistent naming**: Use camelCase for keys\r\n4. **Keep it simple**: Use descriptive but concise key names\r\n5. **Test both languages**: Always verify translations appear correctly in both languages\r\n\r\n## Troubleshooting\r\n\r\n### Translations not appearing?\r\n- Check that the key exists in both translation files\r\n- Verify the key path is correct (case-sensitive)\r\n- Ensure the component is wrapped in LanguageProvider (already done in layout.tsx)\r\n\r\n### Language not persisting?\r\n- Check browser localStorage is enabled\r\n- Clear localStorage and try again\r\n\r\n### Component errors?\r\n- Make sure you added `\"use client\"` for client components\r\n- Import the hook: `import { useLanguage } from \"@/contexts/LanguageContext\";`\r\n"
        }
    ]
}